pipeline {
    agent any
    environment{
        SSH_PRIVATE_KEY = credentials('ssh-private-key')
        APP_NAME = 'authx-backend'
        DOCKER_REPO = credentials('docker-repo')
        VM_IP = credentials('vm-ip')
        AZUSER= credentials('azure-user')
        MONGO_ADMIN= credentials('mongo-admin')
        MONGO_PASSWORD= credentials('mongo-password')
    }
    stages{
        stage('Checkout') {
            steps {
                checkout scm
            }
        }
        
        stage('Get commit hash') {
            steps {
                script {
                    env.COMMIT_HASH = sh(script: 'git rev-parse --short HEAD', returnStdout: true).trim()
                    echo "Commit hash: ${env.COMMIT_HASH}"
                }
            }
        }
        stage('Build and tag Docker Image') {
        
            steps {
                sh 'docker build -t ${APP_NAME}:${COMMIT_HASH} ./AuthXbe'
                echo "built image with tag ${COMMIT_HASH}"
            }
        }
        stage('login and push Docker Image') {
            steps { withCredentials([usernamePassword(credentialsId: 'docker-hub-credentials', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                    sh 'echo $DOCKER_PASS | docker login https://index.docker.io/v1/ --username $DOCKER_USER --password-stdin'
                    sh 'echo "Login successful"'
                    sh 'docker tag ${APP_NAME}:${COMMIT_HASH} ${DOCKER_REPO}/${APP_NAME}:${COMMIT_HASH}'
                    echo "Tagged image as ${DOCKER_REPO}/${APP_NAME}:${COMMIT_HASH}"
                    sh 'docker push ${DOCKER_REPO}/${APP_NAME}:${COMMIT_HASH}'
            }
        }
        }
      stage('Create .env File') {
    steps {
        withCredentials([
            string(credentialsId: 'jwt-access-token-secret', variable: 'JWT_ACCESS_TOKEN_SECRET'),
            string(credentialsId: 'jwt-refresh-token-secret', variable: 'JWT_REFRESH_TOKEN_SECRET'),
            string(credentialsId: 'mongo-admin', variable: 'MONGO_ADMIN'),
            string(credentialsId: 'mongo-password', variable: 'MONGO_PASSWORD')
        ]) {
            writeFile file: '.env', text: """ JWT_ACCESS_TOKEN_SECRET=${JWT_ACCESS_TOKEN_SECRET}
            JWT_REFRESH_TOKEN_SECRET=${JWT_REFRESH_TOKEN_SECRET}
            MONGO_ADMIN=${MONGO_ADMIN}
            MONGO_PASSWORD=${MONGO_PASSWORD}
            APPVERSION=${COMMIT_HASH}
            DOCKER_REPO=${DOCKER_REPO}
            APP_NAME=${APP_NAME}"""
        }
    }
}
        stage('Copy Docker Compose File to VM') {
            steps {
                sshagent(['ssh-private-key']) {
                    sh '''
                        scp -o StrictHostKeyChecking=no ./AuthXbe/docker-compose.yml ./.env ${AZUSER}@${VM_IP}:/home/${AZUSER}/app/
                    '''
                }
            }
        }
        stage('SSH into VM and Deploy with Docker-compose') {
            steps {
                sshagent(['ssh-private-key']) {
                    withCredentials([usernamePassword(credentialsId: 'docker-hub-credentials', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                        sh '''
                            ssh -o StrictHostKeyChecking=no ${AZUSER}@${VM_IP} "
                                cd /home/${AZUSER}/app &&
                                echo '$DOCKER_PASS' | docker login -u '$DOCKER_USER' --password-stdin &&
                                docker compose pull &&
                                docker compose up -d &&
                                docker logout
                            "
                        '''
                    }
                }
            }
}
    }
    post {
            success {
                echo 'Deployment successful!'
              // TO-DO iimplement slack
            }
            failure {
                echo 'Deployment failed!'
                // TO-DO iimplement slack
            }
        }
}
